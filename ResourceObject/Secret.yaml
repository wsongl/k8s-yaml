## 普通类型Secret，挂载secret数据到pod来使用它
# yaml方式
---
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  password: MWYyZDFlMmU2N2Rm
  username: YWRtaW4=

# 命令行方式
# kubectl create secret generic helloworld-tls --from-file=key.pem --from-file=cert.pem



## Docker镜像下载时使用，通过指定Pod的spec.ImagePullSecrets来使用它
# yaml方式
---
apiVersion: v1
kind: Secret
metadata:
  name: xx-secret
data:
  .dockercfg: eyJjY3IuY2NzLnRlbmNlbnR5dW4uY29tL3RlbmNlbnR5dW4iOnsidXNlcm5hbWUiOiIzMzIxMzM3OTk0IiwicGFzc3dvcmQiOiIxMjM0NTYuY29tIiwiZW1haWwiOiIzMzIxMzM3OTk0QHFxLmNvbSIsImF1dGgiOiJNek15TVRNek56azVORG94TWpNME5UWXVZMjl0In19
type: kubernetes.io/dockercfg

# 命令行方式一
# kubectl create secret docker-registry myregistrykey \
# --docker-server=DOCKER_REGISTRY_SERVER \
# --docker-username=DOCKER_USER \
# --docker-password=DOCKER_PASSWORD \
# --docker-email=DOCKER_EMAIL
# 命令行方式二
# kubectl create secret docker-registry myregistrykey --from-file="~/.dockercfg"

# pod中引用该secret
---
apiVersion: v1
kind: Pod
metadata:
  name: foo
spec:
  containers:
    - name: foo
      image: janedoe/awesomeapp:v1
  imagePullSecrets:
    - name: myregistrykey



## Secret在ServiceAccount中使用
kubernetes.io/service-account-token
用于被serviceaccount引用。serviceaccout创建时Kubernetes会默认创建对应的secret。Pod如果使用了serviceaccount，对应的secret会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中。

