---
apiVersion: v1
kind: Service
metadata:
  name: string
  namespace: string
  labels:
    - name: string
  annotations:
    - name: string
spec:
  selector:  # 选择具有指定label标签的pod作为管理应用
    app: string
  type: NodePort  # ClusterIP NodePort LoadBalancer
  # ClusterIP：集群ip，在node上kube-proxy通过设置的iptables规则进行转发；
  # NodePort：宿主机端口，使外部客户端通过node的ip和端口号就能访问服务；
  # LoadBalancer：使用外部lb完成到服务的负载分发，需要在spec.sttus.loadBalancer字段指定外部负载均衡器的ip地址，同时定义nodePort和clusterip，用于公有云环境；
  sessionAffinity: ClientIP  # 保持session
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 秒
  clusterIP: string  # 集群ip，当type=ClusterIP时，如果不指定，则系统自动分配，也可手动指定；当type=LoadBalancer时，需要指定；
  ports:
    - name: string
      protocol: [ TCP | UDP ]  # 默认tcp
      port: int
      targetPort: int  # 转发到后段pod的端口号
      nodePort: int # 当type=NodePort时，指定的宿主机端口
  status:
    loadBalancer:
      ingress:
        - ip: string   # 外部负载均衡器的ip
          hostname: string  # 外部负载均衡器的主机名

# 常用类型
---
apiVersion: v1
kind: Service
metadata:
  name: string
  namespace: string
spec:
  type: ClusterIP
  selector:
    app: string  # label selector
  ports:
    - port: int
      protocol: [TCP | UDP]
      targetPort: int

---
# 默认情况下，node的kube-proxy会在全部网卡上绑定NodePort端口号
apiVersion: v1
kind: Service
metadata:
  name: string
  namespace: string
spec:
  type: NodePort
  selector:
    app: string  # label selector
  ports:
    - port: int
      protocol: [TCP | UDP]
      targetPort: int
      nodePort: int

---
apiVersion: v1
kind: Service
metadata:
  name: string
  namespace: string
spec:
  type: LoadBalancer
  selector:
    app: string  # label selector
  clusterIP: 1.2.3.4
  ports:
    - port: int
      protocol: [TCP | UDP]
      targetPort: int
在服务创建成功后，云服务商会在service的定义中补充LoadBalancer的ip地址：
  status:
    loadBalancer:
      ingress:
        - ip: string


# 会话保持
---
apiVersion: v1
kind: Service
spec:
  sessionAffinity: ClientIP
  sessionAffinityConfig:  # 可省略，会话保持时间
    clientIP:
      timeoutSeconds: 3600  # 秒


# 将外部服务定义为service
---
apiVersion: v1
kind: Service
metadata:
  name: string   # 不设置label selector，而是service和edipoints名字是一样，这样来关联两个服务
spec:
  ports:
    - port: int
      protocol: TCP | UDP
      targetPort: int

---
apiVersion: v1
kind: Endpoints
metadata:
  name: string   # service和edipoints名字是一样，这样来关联两个服务
subsets:
  - addresses:
      - ip: 1.2.3.4
    ports:
      - port: 80


# ExternalName类型
# 用于将集群外的服务定义为kubernetes的集群的service
---
apiVersion: v1
kind: Service
metadata:
  name: string
  namespace: string
spec:
  type: ExternalName
  externalName: www.example.com  # externalName字段可以使用域名或ip格式


# AppProtocol 用于标识后段服务在某个端口号上提供的 应用层 协议类型
---
apiVersion: v1
kind: Service
metadata:
  name: string
spec:
  ports:
    - port: int
      targetPort: int
      AppProtocol: HTTP


# headless service，无clusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
    - port: 80
  clusterIP: None
  selector:
    app: nginx
# nslookup nginx.default.svc.cluster.local，返回全部endpoint ip地址

# 当headless service没有谁label selector，则k8s不会自动创建对应的endpoint列表。
# dns系统会根据下列条件尝试对该服务名设置dns记录：
#1、如果service对类型为ExternalName，则对服务名的访问将直接被DNS系统转换为Service设置对外部名称（externalName）；
#2、如果系统中存在与service同名的endpoint定义，则服务名将被解析为Endpoint定义中的列表，适用于非ExternalName类型的service；
